
    # digital ocean space (using boto3)
    S3_ACCESS_ID   = env.get('AWS_ACCESS_KEY_ID')
    S3_SECRET_KEY  = env.get('AWS_SECRET_ACCESS_KEY')
    S3_REGION      = env.get('S3_REGION')
    S3_REGION_NAME = env.get('S3_REGION_NAME')
    S3_HOST_BASE   = env.get('S3_HOST_BASE')
    S3_HOST_BUCKET = env.get('S3_HOST_BUCKET')
    S3_BUCKET_NAME = env.get('S3_BUCKET_NAME')

    def __init__(self, app):
        self.session = boto3.session.Session()
        self.app = app
        self.client = self.ini_s3_client()

    def ini_s3_client(self):
        ''' called at one of 2 points init | when client is None '''
        if self.app is None or self.session is None:
            raise FailedAppBuild()

        client_config = botocore.config.Config(
            max_pool_connections=17,
        )

        # maintain a ref for reuse
        return self.session.client(
            's3',
            config=client_config,
            region_name=self.app.config['S3_REGION_NAME'],
            endpoint_url=self.app.config['S3_HOST_BASE'],
            aws_access_key_id=self.app.config['S3_ACCESS_ID'],
            aws_secret_access_key=self.app.config['S3_SECRET_KEY'],
            # config=botocore.config.Config(s3={'addressing_style': 'virtual'}),
        )

